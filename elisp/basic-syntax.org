#+BEGIN_SRC emacs-lisp :tangle yes
;;; basic-syntax.org --- Emacs Lisp Syntax

;;; Commentary:
;; Explorations of basic Emacs Lisp syntax.

;;; Code:
#+END_SRC

* Variables and Functions

/setq/ -- define variables:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq name "dwrz")
(setq zero 0)
(setq not-zero 1)
(setq is-true t)
(setq is-false nil)
#+END_SRC

/defun/ -- define functions:
#+BEGIN_SRC emacs-lisp :tangle yes
(defun say-name () (message name))
(defun add-one (n) (+ 1 n)) ; Takes a parameter.
#+END_SRC

Execute functions:
#+BEGIN_SRC emacs-lisp :tangle yes
(say-name) ; dwrz
(add-one 1) ; 2
(add-one zero) ; 1
(add-one zero) ; Still 1.
#+END_SRC

Variables can't be executed:
#+BEGIN_SRC emacs-lisp :tangle yes
(name) ; Symbol’s function definition is void: name
#+END_SRC

** Built-In Functions

*** Strings
/concat/ concatenates strings:
#+BEGIN_SRC emacs-lisp :tangle yes
(concat "Hello " "World" "!") ; "Hello World!"
#+END_SRC

substring returns a string extract, as delimited by start and end indexes:
#+BEGIN_SRC emacs-lisp :tangle yes
(substring "Emacs Lisp" 6 10) ; "Lisp"
(substring "0123" 0 5) ; Args out of range: "0123", 0, 5
#+END_SRC

/format/ formats strings, utilizes /%-sequences/ for substitution:
#+BEGIN_SRC emacs-lisp :tangle yes
(format "Ciao %s!" "micina") ; "Ciao micina!"
#+END_SRC

/progn/ -- executes expressions and returns the last value:
#+BEGIN_SRC emacs-lisp :tangle yes
(progn
  (setq number 0) ; Local variable
  (+ 1 number) ; 1
  (+ 1 number) ; Still 1.
  (- number 1) ; -1
  ) ; Returns - 1
#+END_SRC

/let/ -- used to define local variables.
Will execute multiple expressions like /progn/.
#+BEGIN_SRC emacs-lisp :tangle yes
(not-zero) ; 1
(let ((one 1)
      (two 2)
      (not-zero 5) ; Local binding has different value.
      )
  (+ one two not-zero)
); 8 -- local value was used.
#+END_SRC



/read-from-minibuffer/ returns an inputted string:
#+BEGIN_SRC emacs-lisp :tangle yes
(format "Ciao %s!" (read-from-minibuffer "Chi è? "))
#+END_SRC

* Data Structures

** Lists
/Lists/ seem to form the basis of Lisp, playing a role similar to the /Object/ in JavaScript.

"Everything in Lisp is a list", "everything in JavaScript is an Object" -- technically neither are true, but there's a reason these phrases exist.[fn:1][fn:2]

By default, the first item in a list identifies a function.
To use a list as data, a single quote must be prepended:
#+BEGIN_SRC emacs-lisp :tangle yes
("apple" "banana" "carrot") ; Invalid function: "apple"
'("apple" "banana" "carrot") ; ("apple" "banana" "carrot")
#+END_SRC

This works with functions, too:
#+BEGIN_SRC emacs-lisp :tangle yes
;; Not executed:
'(defun say-something () (message "something")) ; (defun say-something nil (insert "something"))
#+END_SRC

A variety of built-in functions are used to operate on lists:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq string-list '("thread" "twine" "yarn"))
(car string-list) ; "thread"
(cdr string-list) ; ("twine" "yarn")
#+END_SRC

/car/ and /cdr[fn:3]/ retrieve items from a list, but do not modify the list.

Other functions, like /push/, modify the list:
#+BEGIN_SRC emacs-lisp :tangle yes
(push "theory" string-list) ; ("theory" "thread" "twine" "yarn")
#+END_SRC

/mapcar/ calls a function and passes each item in the list to it:
#+BEGIN_SRC emacs-lisp :tangle yes
(defun say-my-favorite-string (favorite)
  (message
   (format "My favorite string is %s" favorite)))

(mapcar 'say-my-favorite-string string-list) ; "My favorite string is theory", etc.
#+END_SRC

** cons
/cons[fn:4]/ .

* Flow Control

** if/then

** while

#+BEGIN_SRC emacs-lisp :tangle yes
; (provide 'basic-syntax)

;;; basic-syntax.org ends here
#+END_SRC

* Footnotes

[fn:1] [[http://www.gigamonkeys.com/book/they-called-it-lisp-for-a-reason-list-processing.html][They Called It LISP for a Reason: List Processing]], from [[http://www.gigamonkeys.com/book/][Practical Common Lisp]], Peter Seibel.

[fn:2] [[https://github.com/getify/You-Dont-Know-JS/blob/master/this%2520%2526%2520object%2520prototypes/ch3.md][You Don't Know JS: /this/ & Object Prototypes]], Kyle Simpson.

[fn:3] [[https://en.wikipedia.org/wiki/CAR_and_CDR][CAR and CDR]], Wikipedia.

[fn:4] [[https://en.wikipedia.org/wiki/Cons][cons]], Wikipedia: "/cons/ *cons*-tructs memory objects which hold two values or pointers to values."
